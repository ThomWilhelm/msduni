<?
function msd2014_block_info() {
	$blocks['footer_left_column'] = array(
		'info' => t('Footer Left Column'),
	);
	$blocks['footer_center_column'] = array(
		'info' => t('Footer Center Column'),
	);
	$blocks['footer_right_column'] = array(
		'info' => t('Footer Right Column'),
	);
	return $blocks;
}

function msd2014_block_configure($delta = '') {
	
	$form = array();
	
	if ($delta == 'footer_left_column') {
		$form['body'] = array(
	        '#type' => 'text_format',
	        '#title' => t('Block body'),
			'#required' => TRUE,
	        '#default_value' => variable_get('msd2014_footer_left_column', ""),
		);
	} else if ($delta == 'footer_center_column') {
		$form['body'] = array(
	        '#type' => 'text_format',
	        '#title' => t('Block body'),
			'#required' => TRUE,
	        '#default_value' => variable_get('msd2014_footer_center_column', ""),
		);
	} else if ($delta == 'footer_right_column') {
		$form['body'] = array(
	        '#type' => 'text_format',
	        '#title' => t('Block body'),
			'#required' => TRUE,
	        '#default_value' => variable_get('msd2014_footer_right_column', ""),
		);
	}
	
	return $form;
	
}

function msd2014_block_view($delta = '') {
	$block = array();
	if($delta == "footer_left_column") {
		$block['content'] = variable_get('msd2014_footer_left_column', "");
	} else if($delta == "footer_center_column") {
		$block['content'] = variable_get('msd2014_footer_center_column', "");
	} else if($delta == "footer_right_column") {
		$block['content'] = variable_get('msd2014_footer_right_column', "");
	}
	return $block;
}

function msd2014_preprocess_block(&$variables) {
	if($variables['block']->delta == 'footer_left_column') {
		$variables['classes_array'][] = "footer_left_column";
	}
	if($variables['block']->delta == 'footer_center_column') {
		$variables['classes_array'][] = "footer_center_column";
	}
	if($variables['block']->delta == 'footer_right_column') {
		$variables['classes_array'][] = "footer_right_column";
	}
}

function msd2014_block_save($delta = '',$edit = array()) {
	if ($delta == 'footer_left_column') {
		variable_set('msd2014_footer_left_column', $edit['body']["value"]);
	} else if ($delta == 'footer_center_column') {
		variable_set('msd2014_footer_center_column', $edit['body']["value"]);
	} else if ($delta == 'footer_right_column') {
		variable_set('msd2014_footer_right_column', $edit['body']["value"]);
	}
}

function msd2014_views_pre_render(&$view) {
	if ($view->name == 'news' && $view->current_display == 'block') {
		// Here you can do any php you want to get the title you need for your view.
		$view->build_info['title'] = "MSD Latest News <span class='view-all'><a href='/news'>View all</a></span>";
	}
	if ($view->name == 'events' && $view->current_display == 'home_events') {
		// Here you can do any php you want to get the title you need for your view.
		$view->build_info['title'] = "Upcoming Events <span class='view-all'><a href='/events'>View all</a></span>";
	}
}

function msd2014_form_alter(&$form, &$form_state, $form_id) {
	
	global $user;
	
	if(
		$form_id == 'user_register_form' ||
		$form_id == 'user_profile_form'
	) {
		// Add listener for toggling profile fields when we change the users role
		$form['account']['roles_change']['#attributes'] = array('onclick' => "Drupal.msd2014.toggleProfile(this)");
	}
	
	// Determine whether they have either the administrator or editor role
	$findEditorRoles = array_intersect($user->roles, array("administrator", "editor"));
	
	// Hide all fields except "Staff Profile"  when a staff member without administrator or editor privileges
	if(
		$form_id == "user_profile_form" &&
		in_array("staff", $user->roles) &&
		count($findEditorRoles) == 0
	) {
		
		// Hide email and password change fields
		$form['account']['mail']['#access'] = FALSE;
		$form['account']['current_pass']['#access'] = FALSE;
		$form['account']['pass']['#access'] = FALSE;
		
		// Hide staff type field, this should only be editable by an admin/editor 
		$form['field_staff_type']['#access'] = FALSE;
		
	}
	
}

function msd2014_menu_alter(&$items) {
	// Change the title of user profile pages to the user's name.
	$items['user/%user']['title callback'] = 'msd2014_user_page_title';
}

function msd2014_user_page_title() {
	
	$output = "";
	
	if (arg(0) == 'user') {
		
		// Load uid from url
		$user = user_load(arg(1));
		
		// Get the full name output, join together title, first name and last name.
		@$output = $user->field_title[LANGUAGE_NONE][0]['value'];
		@$output .= " " . $user->field_first_name[LANGUAGE_NONE][0]['value'];
		@$output .= " " . $user->field_last_name[LANGUAGE_NONE][0]['value'];
		$output = trim($output);
		
	}
	
	return $output;
}

function msd2014_module_implements_alter(&$implementations, $hook) {
	if ($hook == 'form_alter') {
		// Move msd2014_form_alter() to the end of the list. module_implements()
		// iterates through $implementations with a foreach loop which PHP iterates
		// in the order that the items were added, so to move an item to the end of
		// the array, we remove it and then add it.
		$group = $implementations['msd2014'];
		unset($implementations['msd2014']);
		$implementations['msd2014'] = $group;
	}
}

function msd2014_user_view($account, $view_mode, $langcode) {
	
	$staff_type = field_get_items("user", $account, "field_staff_type");
	
	if(!is_array($staff_type)) {
		drupal_not_found();
	}
	
	foreach($staff_type as $value) {
		if($value["value"] == "Academic") {
			return;
		}
	}
	
	drupal_not_found();
	
}
